select(date=1,tests=7,cases=9,currentHosp=21,ICU=23,vent=24,dailyDeaths=25)%>%
filter(row_number() >= 11)%>%
mutate(percentPos = round((cases/tests * 100),1),
Avg7Day_Cases = round((rollmean(cases,7,na.pad=TRUE, align="right")),0),
Avg7Day_Tests = round((rollmean(tests,7,na.pad=TRUE,align="right")),0),
Avg7Day_Pos = round((rollmean(percentPos,7,na.pad=TRUE,align="right")),1),
Avg7Day_Hosp = round((rollmean(currentHosp,7,na.pad=TRUE,align="right")),0),
Avg7Day_ICU = round((rollmean(ICU,7,na.pad=TRUE,align="right")),0),
Avg7Day_Vent = round((rollmean(vent,7,na.pad=TRUE,align="right")),0),
Avg7Day_Deaths = round((rollmean(dailyDeaths,7,na.pad=TRUE,align="right")),0))
updated <- tail(stateDataCleaned$date, 1) # get last row of data frame for most recent data
updated <- format(updated, format="%B %d, %Y")
hospUpdated <- stateDataCleaned$date[nrow(stateDataCleaned) - 1]
hospUpdated <- format(hospUpdated,format="%B %d, %Y") # get second-to-last row as hospitalizations are a day behind
caseGraph <- ggplot(stateDataCleaned, aes(x=date, group=1, text=paste("Date: ", date,
"<br>Cases: ", cases,
"<br>7-Day Average: ", Avg7Day_Cases)))+
geom_col(aes(y=cases))+
geom_line(aes(y=Avg7Day_Cases), color="blue")+
labs(title = paste("Latest data:", updated), x="Date", y = "Cases Reported")
caseGraph <- ggplotly(caseGraph,tooltip="text",dynamicTicks=TRUE, originalData=FALSE)%>%config(displayModeBar=FALSE)
testGraph <- ggplot(stateDataCleaned, aes(date, group=1, text=paste("Date: ", date,
"<br>Tests: ", tests,
"<br>7-Day Average: ", Avg7Day_Tests)))+
geom_col(aes(y=tests))+
geom_line(aes(y=Avg7Day_Tests),color="blue")+
labs(title = paste("Latest data:", updated), x="Date", y="Tests Performed")
testGraph <- ggplotly(testGraph,tooltip="text",dynamicTicks=TRUE, originalData=FALSE)%>%config(displayModeBar=FALSE)
posGraph <- ggplot(stateDataCleaned,aes(date, group=1, text=paste("Date: ", date,
"<br>Percent Pos.: ", percentPos,
"<br>7-Day Average: ", Avg7Day_Pos)))+
geom_col(aes(y=percentPos))+
geom_line(aes(y=Avg7Day_Pos),color="blue")+
labs(title = paste("Latest data:", updated), x="Date", y="Percent Positive")
posGraph <- ggplotly(posGraph,tooltip="text",dynamicTicks=TRUE, originalData=FALSE)%>%config(displayModeBar=FALSE)
hospGraph <- ggplot(stateDataCleaned,aes(date, group=1, text=paste("Date: ", date,
"<br>Hospitalized: ", currentHosp,
"<br>7-Day Average: ", Avg7Day_Hosp)))+
geom_col(aes(y=currentHosp))+
geom_line(aes(y=Avg7Day_Hosp),color='blue')+
labs(title = paste("Latest data:", hospUpdated), x="Date", y="Hospitalized")
hospGraph <- ggplotly(hospGraph,tooltip="text",dynamicTicks=TRUE, originalData=FALSE)%>%config(displayModeBar=FALSE)
ICUGraph <- ggplot(stateDataCleaned,aes(x=date,group=1))+
geom_col(aes(y=ICU,fill="ICU", text=paste("Date: ", date,
"<br>ICU: ", ICU,
"<br>7-Day Average: ", Avg7Day_ICU)),color='red')+
geom_line(aes(y=Avg7Day_ICU, text=paste("Date: ", date,
"<br>ICU: ", ICU,
"<br>7-Day Average: ", Avg7Day_ICU)),color='red')+
geom_col(aes(y=vent,fill="Ventilator", text=paste("Date: ", date,
"<br>Ventilator: ", vent,
"<br>7-Day Average: ", Avg7Day_Vent)),color='blue')+
geom_line(aes(y=Avg7Day_Vent, text=paste("Date: ", date,
"<br>Ventilator: ", vent,
"<br>7-Day Average: ", Avg7Day_Vent)),color='blue')+
scale_fill_manual(name="Legend", labels = c("ICU", "Ventilator"),values = ICUcolors)+
labs(title = paste("Latest data:", hospUpdated), x="Date", y="ICU/Ventilator")
ICUGraph <- ggplotly(ICUGraph,tooltip="text",dynamicTicks=TRUE, originalData=FALSE)%>%config(displayModeBar=FALSE)
dailyDeathGraph <- ggplot(stateDataCleaned,aes(date), group=1, text=paste("Date: ", date,
"<br>Deaths: ", dailyDeaths,
"<br>7-Day Average: ", Avg7Day_Deaths))+
geom_col(aes(y=dailyDeaths))+
geom_line(aes(y=Avg7Day_Deaths),color="blue")+
labs(title = paste("Latest data:", updated), x="Date", y="Deaths Reported")
dailyDeathGraph <- ggplotly(dailyDeathGraph,tooltip="text",dynamicTicks=TRUE, originalData=FALSE)%>%config(displayModeBar=FALSE)
htmlwidgets::saveWidget(caseGraph, file="../graphs/DAILY_cases.html",selfcontained=FALSE,libdir="../graphs/plotlyJS",title='dailycases')
htmlwidgets::saveWidget(testGraph, file="../graphs/DAILY_tests.html",selfcontained=FALSE,libdir="../graphs/plotlyJS",title='dailytests')
htmlwidgets::saveWidget(posGraph,file="../graphs/DAILY_pos.html",selfcontained=FALSE,libdir="../graphs/plotlyJS",title='dailypos')
htmlwidgets::saveWidget(hospGraph,file="../graphs/DAILY_hosp.html",selfcontained=FALSE,libdir="../graphs/plotlyJS",title='dailyhosp')
htmlwidgets::saveWidget(ICUGraph,file="../graphs/DAILY_ICU.html",selfcontained=FALSE,libdir="../graphs/plotlyJS",title='dailyicu')
htmlwidgets::saveWidget(dailyDeathGraph,file="../graphs/DAILY_deaths.html",selfcontained=FALSE,libdir="../graphs/plotlyJS",title='dailydeaths')
if(identical(stateDataCur,stateData)){
stop("Graphs already up to date")
}else {
stateDataCur <- stateData
stateDataCleaned <- stateDataCur%>%
select(date=1,tests=7,cases=9,currentHosp=21,ICU=23,vent=24,dailyDeaths=25)%>%
filter(row_number() >= 11)%>%
mutate(percentPos = round((cases/tests * 100),1),
Avg7Day_Cases = round((rollmean(cases,7,na.pad=TRUE, align="right")),0),
Avg7Day_Tests = round((rollmean(tests,7,na.pad=TRUE,align="right")),0),
Avg7Day_Pos = round((rollmean(percentPos,7,na.pad=TRUE,align="right")),1),
Avg7Day_Hosp = round((rollmean(currentHosp,7,na.pad=TRUE,align="right")),0),
Avg7Day_ICU = round((rollmean(ICU,7,na.pad=TRUE,align="right")),0),
Avg7Day_Vent = round((rollmean(vent,7,na.pad=TRUE,align="right")),0),
Avg7Day_Deaths = round((rollmean(dailyDeaths,7,na.pad=TRUE,align="right")),0))
updated <- tail(stateDataCleaned$date, 1) # get last row of data frame for most recent data
updated <- format(updated, format="%B %d, %Y")
hospUpdated <- stateDataCleaned$date[nrow(stateDataCleaned) - 1]
hospUpdated <- format(hospUpdated,format="%B %d, %Y") # get second-to-last row as hospitalizations are a day behind
caseGraph <- ggplot(stateDataCleaned, aes(x=date, group=1, text=paste("Date: ", date,
"<br>Cases: ", cases,
"<br>7-Day Average: ", Avg7Day_Cases)))+
geom_col(aes(y=cases))+
geom_line(aes(y=Avg7Day_Cases), color="blue")+
labs(title = paste("Latest data:", updated), x="Date", y = "Cases Reported")
caseGraph <- ggplotly(caseGraph,tooltip="text",dynamicTicks=TRUE, originalData=FALSE)%>%config(displayModeBar=FALSE)
testGraph <- ggplot(stateDataCleaned, aes(date, group=1, text=paste("Date: ", date,
"<br>Tests: ", tests,
"<br>7-Day Average: ", Avg7Day_Tests)))+
geom_col(aes(y=tests))+
geom_line(aes(y=Avg7Day_Tests),color="blue")+
labs(title = paste("Latest data:", updated), x="Date", y="Tests Performed")
testGraph <- ggplotly(testGraph,tooltip="text",dynamicTicks=TRUE, originalData=FALSE)%>%config(displayModeBar=FALSE)
posGraph <- ggplot(stateDataCleaned,aes(date, group=1, text=paste("Date: ", date,
"<br>Percent Pos.: ", percentPos,
"<br>7-Day Average: ", Avg7Day_Pos)))+
geom_col(aes(y=percentPos))+
geom_line(aes(y=Avg7Day_Pos),color="blue")+
labs(title = paste("Latest data:", updated), x="Date", y="Percent Positive")
posGraph <- ggplotly(posGraph,tooltip="text",dynamicTicks=TRUE, originalData=FALSE)%>%config(displayModeBar=FALSE)
hospGraph <- ggplot(stateDataCleaned,aes(date, group=1, text=paste("Date: ", date,
"<br>Hospitalized: ", currentHosp,
"<br>7-Day Average: ", Avg7Day_Hosp)))+
geom_col(aes(y=currentHosp))+
geom_line(aes(y=Avg7Day_Hosp),color='blue')+
labs(title = paste("Latest data:", hospUpdated), x="Date", y="Hospitalized")
hospGraph <- ggplotly(hospGraph,tooltip="text",dynamicTicks=TRUE, originalData=FALSE)%>%config(displayModeBar=FALSE)
ICUGraph <- ggplot(stateDataCleaned,aes(x=date,group=1))+
geom_col(aes(y=ICU,fill="ICU", text=paste("Date: ", date,
"<br>ICU: ", ICU,
"<br>7-Day Average: ", Avg7Day_ICU)),color='red')+
geom_line(aes(y=Avg7Day_ICU, text=paste("Date: ", date,
"<br>ICU: ", ICU,
"<br>7-Day Average: ", Avg7Day_ICU)),color='red')+
geom_col(aes(y=vent,fill="Ventilator", text=paste("Date: ", date,
"<br>Ventilator: ", vent,
"<br>7-Day Average: ", Avg7Day_Vent)),color='blue')+
geom_line(aes(y=Avg7Day_Vent, text=paste("Date: ", date,
"<br>Ventilator: ", vent,
"<br>7-Day Average: ", Avg7Day_Vent)),color='blue')+
scale_fill_manual(name="Legend", labels = c("ICU", "Ventilator"),values = ICUcolors)+
labs(title = paste("Latest data:", hospUpdated), x="Date", y="ICU/Ventilator")
ICUGraph <- ggplotly(ICUGraph,tooltip="text",dynamicTicks=TRUE, originalData=FALSE)%>%config(displayModeBar=FALSE)
dailyDeathGraph <- ggplot(stateDataCleaned,aes(date), group=1, text=paste("Date: ", date,
"<br>Deaths: ", dailyDeaths,
"<br>7-Day Average: ", Avg7Day_Deaths))+
geom_col(aes(y=dailyDeaths))+
geom_line(aes(y=Avg7Day_Deaths),color="blue")+
labs(title = paste("Latest data:", updated), x="Date", y="Deaths Reported")
dailyDeathGraph <- ggplotly(dailyDeathGraph,tooltip="text",dynamicTicks=TRUE, originalData=FALSE)%>%config(displayModeBar=FALSE)
htmlwidgets::saveWidget(caseGraph, file="../graphs/DAILY_cases.html",selfcontained=FALSE,libdir="../graphs/plotlyJS",title='dailycases')
htmlwidgets::saveWidget(testGraph, file="../graphs/DAILY_tests.html",selfcontained=FALSE,libdir="../graphs/plotlyJS",title='dailytests')
htmlwidgets::saveWidget(posGraph,file="../graphs/DAILY_pos.html",selfcontained=FALSE,libdir="../graphs/plotlyJS",title='dailypos')
htmlwidgets::saveWidget(hospGraph,file="../graphs/DAILY_hosp.html",selfcontained=FALSE,libdir="../graphs/plotlyJS",title='dailyhosp')
htmlwidgets::saveWidget(ICUGraph,file="../graphs/DAILY_ICU.html",selfcontained=FALSE,libdir="../graphs/plotlyJS",title='dailyicu')
htmlwidgets::saveWidget(dailyDeathGraph,file="../graphs/DAILY_deaths.html",selfcontained=FALSE,libdir="../graphs/plotlyJS",title='dailydeaths')
}
weeklyUpdated <- tail(rateDataCleaned$weekEnding, 1)
weeklyUpdated <- format(weeklyUpdated, "%B %d, %Y")
source('~/Documents/GitHub/ri-covid-data/R/Weekly100k.R', echo=TRUE)
rateDataCur <- rateData
rateDataCleaned <- rateDataCur%>%
select(weekEnding=1,casesPer100k=14)%>%
filter(row_number() >= 8)
rateDataCleaned$casesPer100k <- as.numeric(as.character(rateDataCleaned$casesPer100k))
rateDataCleaned$weekEnding <- sub("\\d{1,2}/\\d{1,2}-","", rateDataCleaned$weekEnding)
rateDataCleaned$weekEnding <- sub(" \\(.*","",rateDataCleaned$weekEnding)
weeklyUpdated <- tail(rateDataCleaned$weekEnding, 1)
weeklyUpdated <- format(weeklyUpdated, "%B %d, %Y")
if(nrow(rateDataCleaned) < 44){
rateDataCleaned$weekEnding <- paste("2020",rateDataCleaned$weekEnding,sep="-")
}else{
for(row in 1:43(rateDataCleaned)){
rateDataCleaned$weekEnding[row] <- paste("2020",rateDataCleaned$weekEnding[row],sep="-")
}
for(row in 44:nrow(rateDataCleaned)){
rateDataCleaned$weekEnding[row] <- paste("2021",rateDataCleaned$weekEnding[row],sep="-")
}
}
rateDataCleaned$weekEnding <- sub("/","-",rateDataCleaned$weekEnding)
rateDataCleaned$weekEnding <- as.Date(rateDataCleaned$weekEnding)
cases100kGraph <- ggplot(rateDataCleaned,aes(weekEnding,casesPer100k, group=1, text=paste("Week Ending: ", weekEnding,
"<br>Cases per 100k: ", casesPer100k)))+
geom_line(color="blue")+
labs(title=paste("Latest data: Week ending", weeklyUpdated), x="Week Ending", y = "Weekly Cases per 100,000 Residents")
cases100kGraph <- ggplotly(cases100kGraph,tooltip="text",dynamicTicks=TRUE, originalData=FALSE)%>%config(displayModeBar=FALSE)
htmlwidgets::saveWidget(cases100kGraph, file="../graphs/WEEKLY_100k.html",selfcontained=FALSE,libdir="../graphs/plotlyJS",title="weekly100k")
}
rateDataCur <- rateData
rateDataCleaned <- rateDataCur%>%
select(weekEnding=1,casesPer100k=14)%>%
filter(row_number() >= 8)
rateDataCleaned$casesPer100k <- as.numeric(as.character(rateDataCleaned$casesPer100k))
rateDataCleaned$weekEnding <- sub("\\d{1,2}/\\d{1,2}-","", rateDataCleaned$weekEnding)
rateDataCleaned$weekEnding <- sub(" \\(.*","",rateDataCleaned$weekEnding)
if(nrow(rateDataCleaned) < 44){
rateDataCleaned$weekEnding <- paste("2020",rateDataCleaned$weekEnding,sep="-")
}else{
for(row in 1:43(rateDataCleaned)){
rateDataCleaned$weekEnding[row] <- paste("2020",rateDataCleaned$weekEnding[row],sep="-")
}
for(row in 44:nrow(rateDataCleaned)){
rateDataCleaned$weekEnding[row] <- paste("2021",rateDataCleaned$weekEnding[row],sep="-")
}
}
rateDataCleaned$weekEnding <- sub("/","-",rateDataCleaned$weekEnding)
rateDataCleaned$weekEnding <- as.Date(rateDataCleaned$weekEnding)
weeklyUpdated <- tail(rateDataCleaned$weekEnding, 1)
weeklyUpdated <- format(weeklyUpdated, "%B %d, %Y")
cases100kGraph <- ggplot(rateDataCleaned,aes(weekEnding,casesPer100k, group=1, text=paste("Week Ending: ", weekEnding,
"<br>Cases per 100k: ", casesPer100k)))+
geom_line(color="blue")+
labs(title=paste("Latest data: Week ending", weeklyUpdated), x="Week Ending", y = "Weekly Cases per 100,000 Residents")
cases100kGraph <- ggplotly(cases100kGraph,tooltip="text",dynamicTicks=TRUE, originalData=FALSE)%>%config(displayModeBar=FALSE)
htmlwidgets::saveWidget(cases100kGraph, file="../graphs/WEEKLY_100k.html",selfcontained=FALSE,libdir="../graphs/plotlyJS",title="weekly100k")
}
View(stateData)
stateDataCur <- stateData
stateDataCleaned <- stateDataCur%>%
select(date=1,tests=7,cases=9,currentHosp=21,ICU=23,vent=24,dailyDeaths=25)%>%
mutate(percentPos = round((cases/tests * 100),1),
Avg7Day_Cases = round((rollmean(cases,7,na.pad=TRUE, align="right")),0),
Avg7Day_Tests = round((rollmean(tests,7,na.pad=TRUE,align="right")),0),
Avg7Day_Pos = round((rollmean(percentPos,7,na.pad=TRUE,align="right")),1),
Avg7Day_Hosp = round((rollmean(currentHosp,7,na.pad=TRUE,align="right")),0),
Avg7Day_ICU = round((rollmean(ICU,7,na.pad=TRUE,align="right")),0),
Avg7Day_Vent = round((rollmean(vent,7,na.pad=TRUE,align="right")),0),
Avg7Day_Deaths = round((rollmean(dailyDeaths,7,na.pad=TRUE,align="right")),0))
updated <- tail(stateDataCleaned$date, 1) # get last row of data frame for most recent data
updated <- format(updated, "%B %d, %Y")
hospUpdated <- stateDataCleaned$date[nrow(stateDataCleaned) - 1]
hospUpdated <- format(hospUpdated, "%B %d, %Y") # get second-to-last row as hospitalizations are a day behind
caseGraph <- ggplot(stateDataCleaned, aes(x=date, group=1, text=paste("Date: ", date,
"<br>Cases: ", cases,
"<br>7-Day Average: ", Avg7Day_Cases)))+
geom_col(aes(y=cases))+
geom_line(aes(y=Avg7Day_Cases), color="blue")+
labs(title = paste("Latest data:", updated), x="Date", y = "Cases Reported")
caseGraph <- ggplotly(caseGraph,tooltip="text",dynamicTicks=TRUE, originalData=FALSE)%>%config(displayModeBar=FALSE)
testGraph <- ggplot(stateDataCleaned, aes(date, group=1, text=paste("Date: ", date,
"<br>Tests: ", tests,
"<br>7-Day Average: ", Avg7Day_Tests)))+
geom_col(aes(y=tests))+
geom_line(aes(y=Avg7Day_Tests),color="blue")+
labs(title = paste("Latest data:", updated), x="Date", y="Tests Performed")
testGraph <- ggplotly(testGraph,tooltip="text",dynamicTicks=TRUE, originalData=FALSE)%>%config(displayModeBar=FALSE)
posGraph <- ggplot(stateDataCleaned,aes(date, group=1, text=paste("Date: ", date,
"<br>Percent Pos.: ", percentPos,
"<br>7-Day Average: ", Avg7Day_Pos)))+
geom_col(aes(y=percentPos))+
geom_line(aes(y=Avg7Day_Pos),color="blue")+
labs(title = paste("Latest data:", updated), x="Date", y="Percent Positive")
posGraph <- ggplotly(posGraph,tooltip="text",dynamicTicks=TRUE, originalData=FALSE)%>%config(displayModeBar=FALSE)
hospGraph <- ggplot(stateDataCleaned,aes(date, group=1, text=paste("Date: ", date,
"<br>Hospitalized: ", currentHosp,
"<br>7-Day Average: ", Avg7Day_Hosp)))+
geom_col(aes(y=currentHosp))+
geom_line(aes(y=Avg7Day_Hosp),color='blue')+
labs(title = paste("Latest data:", hospUpdated), x="Date", y="Hospitalized")
hospGraph <- ggplotly(hospGraph,tooltip="text",dynamicTicks=TRUE, originalData=FALSE)%>%config(displayModeBar=FALSE)
ICUGraph <- ggplot(stateDataCleaned,aes(x=date,group=1))+
geom_col(aes(y=ICU,fill="ICU", text=paste("Date: ", date,
"<br>ICU: ", ICU,
"<br>7-Day Average: ", Avg7Day_ICU)),color='red')+
geom_line(aes(y=Avg7Day_ICU, text=paste("Date: ", date,
"<br>ICU: ", ICU,
"<br>7-Day Average: ", Avg7Day_ICU)),color='red')+
geom_col(aes(y=vent,fill="Ventilator", text=paste("Date: ", date,
"<br>Ventilator: ", vent,
"<br>7-Day Average: ", Avg7Day_Vent)),color='blue')+
geom_line(aes(y=Avg7Day_Vent, text=paste("Date: ", date,
"<br>Ventilator: ", vent,
"<br>7-Day Average: ", Avg7Day_Vent)),color='blue')+
scale_fill_manual(name="Legend", labels = c("ICU", "Ventilator"),values = ICUcolors)+
labs(title = paste("Latest data:", hospUpdated), x="Date", y="ICU/Ventilator")
ICUGraph <- ggplotly(ICUGraph,tooltip="text",dynamicTicks=TRUE, originalData=FALSE)%>%config(displayModeBar=FALSE)
dailyDeathGraph <- ggplot(stateDataCleaned,aes(date), group=1, text=paste("Date: ", date,
"<br>Deaths: ", dailyDeaths,
"<br>7-Day Average: ", Avg7Day_Deaths))+
geom_col(aes(y=dailyDeaths))+
geom_line(aes(y=Avg7Day_Deaths),color="blue")+
labs(title = paste("Latest data:", updated), x="Date", y="Deaths Reported")
dailyDeathGraph <- ggplotly(dailyDeathGraph,tooltip="text",dynamicTicks=TRUE, originalData=FALSE)%>%config(displayModeBar=FALSE)
htmlwidgets::saveWidget(caseGraph, file="../graphs/DAILY_cases.html",selfcontained=FALSE,libdir="../graphs/plotlyJS",title='dailycases')
htmlwidgets::saveWidget(testGraph, file="../graphs/DAILY_tests.html",selfcontained=FALSE,libdir="../graphs/plotlyJS",title='dailytests')
htmlwidgets::saveWidget(posGraph,file="../graphs/DAILY_pos.html",selfcontained=FALSE,libdir="../graphs/plotlyJS",title='dailypos')
htmlwidgets::saveWidget(hospGraph,file="../graphs/DAILY_hosp.html",selfcontained=FALSE,libdir="../graphs/plotlyJS",title='dailyhosp')
htmlwidgets::saveWidget(ICUGraph,file="../graphs/DAILY_ICU.html",selfcontained=FALSE,libdir="../graphs/plotlyJS",title='dailyicu')
htmlwidgets::saveWidget(dailyDeathGraph,file="../graphs/DAILY_deaths.html",selfcontained=FALSE,libdir="../graphs/plotlyJS",title='dailydeaths')
}
library(tidyverse)
library(plotly)
library(zoo)
library(htmlwidgets)
library(googlesheets4)
gs4_deauth()
ICUcolors <- c("ICU" = "#ff8066", "Ventilator" = "#6685ff")
stateData <- read_sheet("https://docs.google.com/spreadsheets/d/1c2QrNMz8pIbYEKzMJL7Uh2dtThOJa2j1sSMwiDo5Gz4/edit#gid=1592746937", sheet = "Trends")
if(identical(stateDataCur,stateData)){
stop("Graphs already up to date")
}else {
stateDataCur <- stateData
stateDataCleaned <- stateDataCur%>%
select(date=1,tests=7,cases=9,currentHosp=21,ICU=23,vent=24,dailyDeaths=25)%>%
mutate(percentPos = round((cases/tests * 100),1),
Avg7Day_Cases = round((rollmean(cases,7,na.pad=TRUE, align="right")),0),
Avg7Day_Tests = round((rollmean(tests,7,na.pad=TRUE,align="right")),0),
Avg7Day_Pos = round((rollmean(percentPos,7,na.pad=TRUE,align="right")),1),
Avg7Day_Hosp = round((rollmean(currentHosp,7,na.pad=TRUE,align="right")),0),
Avg7Day_ICU = round((rollmean(ICU,7,na.pad=TRUE,align="right")),0),
Avg7Day_Vent = round((rollmean(vent,7,na.pad=TRUE,align="right")),0),
Avg7Day_Deaths = round((rollmean(dailyDeaths,7,na.pad=TRUE,align="right")),0))
updated <- tail(stateDataCleaned$date, 1) # get last row of data frame for most recent data
updated <- format(updated, "%B %d, %Y")
hospUpdated <- stateDataCleaned$date[nrow(stateDataCleaned) - 1]
hospUpdated <- format(hospUpdated, "%B %d, %Y") # get second-to-last row as hospitalizations are a day behind
caseGraph <- ggplot(stateDataCleaned, aes(x=date, group=1, text=paste("Date: ", date,
"<br>Cases: ", cases,
"<br>7-Day Average: ", Avg7Day_Cases)))+
geom_col(aes(y=cases))+
geom_line(aes(y=Avg7Day_Cases), color="blue")+
labs(title = paste("Latest data:", updated), x="Date", y = "Cases Reported")
caseGraph <- ggplotly(caseGraph,tooltip="text",dynamicTicks=TRUE, originalData=FALSE)%>%config(displayModeBar=FALSE)
testGraph <- ggplot(stateDataCleaned, aes(date, group=1, text=paste("Date: ", date,
"<br>Tests: ", tests,
"<br>7-Day Average: ", Avg7Day_Tests)))+
geom_col(aes(y=tests))+
geom_line(aes(y=Avg7Day_Tests),color="blue")+
labs(title = paste("Latest data:", updated), x="Date", y="Tests Performed")
testGraph <- ggplotly(testGraph,tooltip="text",dynamicTicks=TRUE, originalData=FALSE)%>%config(displayModeBar=FALSE)
posGraph <- ggplot(stateDataCleaned,aes(date, group=1, text=paste("Date: ", date,
"<br>Percent Pos.: ", percentPos,
"<br>7-Day Average: ", Avg7Day_Pos)))+
geom_col(aes(y=percentPos))+
geom_line(aes(y=Avg7Day_Pos),color="blue")+
labs(title = paste("Latest data:", updated), x="Date", y="Percent Positive")
posGraph <- ggplotly(posGraph,tooltip="text",dynamicTicks=TRUE, originalData=FALSE)%>%config(displayModeBar=FALSE)
hospGraph <- ggplot(stateDataCleaned,aes(date, group=1, text=paste("Date: ", date,
"<br>Hospitalized: ", currentHosp,
"<br>7-Day Average: ", Avg7Day_Hosp)))+
geom_col(aes(y=currentHosp))+
geom_line(aes(y=Avg7Day_Hosp),color='blue')+
labs(title = paste("Latest data:", hospUpdated), x="Date", y="Hospitalized")
hospGraph <- ggplotly(hospGraph,tooltip="text",dynamicTicks=TRUE, originalData=FALSE)%>%config(displayModeBar=FALSE)
ICUGraph <- ggplot(stateDataCleaned,aes(x=date,group=1))+
geom_col(aes(y=ICU,fill="ICU", text=paste("Date: ", date,
"<br>ICU: ", ICU,
"<br>7-Day Average: ", Avg7Day_ICU)),color='red')+
geom_line(aes(y=Avg7Day_ICU, text=paste("Date: ", date,
"<br>ICU: ", ICU,
"<br>7-Day Average: ", Avg7Day_ICU)),color='red')+
geom_col(aes(y=vent,fill="Ventilator", text=paste("Date: ", date,
"<br>Ventilator: ", vent,
"<br>7-Day Average: ", Avg7Day_Vent)),color='blue')+
geom_line(aes(y=Avg7Day_Vent, text=paste("Date: ", date,
"<br>Ventilator: ", vent,
"<br>7-Day Average: ", Avg7Day_Vent)),color='blue')+
scale_fill_manual(name="Legend", labels = c("ICU", "Ventilator"),values = ICUcolors)+
labs(title = paste("Latest data:", hospUpdated), x="Date", y="ICU/Ventilator")
ICUGraph <- ggplotly(ICUGraph,tooltip="text",dynamicTicks=TRUE, originalData=FALSE)%>%config(displayModeBar=FALSE)
dailyDeathGraph <- ggplot(stateDataCleaned,aes(date), group=1, text=paste("Date: ", date,
"<br>Deaths: ", dailyDeaths,
"<br>7-Day Average: ", Avg7Day_Deaths))+
geom_col(aes(y=dailyDeaths))+
geom_line(aes(y=Avg7Day_Deaths),color="blue")+
labs(title = paste("Latest data:", updated), x="Date", y="Deaths Reported")
dailyDeathGraph <- ggplotly(dailyDeathGraph,tooltip="text",dynamicTicks=TRUE, originalData=FALSE)%>%config(displayModeBar=FALSE)
htmlwidgets::saveWidget(caseGraph, file="../graphs/DAILY_cases.html",selfcontained=FALSE,libdir="../graphs/plotlyJS",title='dailycases')
htmlwidgets::saveWidget(testGraph, file="../graphs/DAILY_tests.html",selfcontained=FALSE,libdir="../graphs/plotlyJS",title='dailytests')
htmlwidgets::saveWidget(posGraph,file="../graphs/DAILY_pos.html",selfcontained=FALSE,libdir="../graphs/plotlyJS",title='dailypos')
htmlwidgets::saveWidget(hospGraph,file="../graphs/DAILY_hosp.html",selfcontained=FALSE,libdir="../graphs/plotlyJS",title='dailyhosp')
htmlwidgets::saveWidget(ICUGraph,file="../graphs/DAILY_ICU.html",selfcontained=FALSE,libdir="../graphs/plotlyJS",title='dailyicu')
htmlwidgets::saveWidget(dailyDeathGraph,file="../graphs/DAILY_deaths.html",selfcontained=FALSE,libdir="../graphs/plotlyJS",title='dailydeaths')
}
stateDataCur <- stateData
stateDataCleaned <- stateDataCur%>%
select(date=1,tests=7,cases=9,currentHosp=21,ICU=23,vent=24,dailyDeaths=25)%>%
mutate(percentPos = round((cases/tests * 100),1),
Avg7Day_Cases = round((rollmean(cases,7,na.pad=TRUE, align="right")),0),
Avg7Day_Tests = round((rollmean(tests,7,na.pad=TRUE,align="right")),0),
Avg7Day_Pos = round((rollmean(percentPos,7,na.pad=TRUE,align="right")),1),
Avg7Day_Hosp = round((rollmean(currentHosp,7,na.pad=TRUE,align="right")),0),
Avg7Day_ICU = round((rollmean(ICU,7,na.pad=TRUE,align="right")),0),
Avg7Day_Vent = round((rollmean(vent,7,na.pad=TRUE,align="right")),0),
Avg7Day_Deaths = round((rollmean(dailyDeaths,7,na.pad=TRUE,align="right")),0))
updated <- tail(stateDataCleaned$date, 1) # get last row of data frame for most recent data
updated <- format(updated, "%B %d, %Y")
hospUpdated <- stateDataCleaned$date[nrow(stateDataCleaned) - 1]
hospUpdated <- format(hospUpdated, "%B %d, %Y") # get second-to-last row as hospitalizations are a day behind
caseGraph <- ggplot(stateDataCleaned, aes(x=date, group=1, text=paste("Date: ", date,
"<br>Cases: ", cases,
"<br>7-Day Average: ", Avg7Day_Cases)))+
geom_col(aes(y=cases))+
geom_line(aes(y=Avg7Day_Cases), color="blue")+
labs(title = paste("Latest data:", updated), x="Date", y = "Cases Reported")
caseGraph <- ggplotly(caseGraph,tooltip="text",dynamicTicks=TRUE, originalData=FALSE)%>%config(displayModeBar=FALSE)
testGraph <- ggplot(stateDataCleaned, aes(date, group=1, text=paste("Date: ", date,
"<br>Tests: ", tests,
"<br>7-Day Average: ", Avg7Day_Tests)))+
geom_col(aes(y=tests))+
geom_line(aes(y=Avg7Day_Tests),color="blue")+
labs(title = paste("Latest data:", updated), x="Date", y="Tests Performed")
testGraph <- ggplotly(testGraph,tooltip="text",dynamicTicks=TRUE, originalData=FALSE)%>%config(displayModeBar=FALSE)
posGraph <- ggplot(stateDataCleaned,aes(date, group=1, text=paste("Date: ", date,
"<br>Percent Pos.: ", percentPos,
"<br>7-Day Average: ", Avg7Day_Pos)))+
geom_col(aes(y=percentPos))+
geom_line(aes(y=Avg7Day_Pos),color="blue")+
labs(title = paste("Latest data:", updated), x="Date", y="Percent Positive")
posGraph <- ggplotly(posGraph,tooltip="text",dynamicTicks=TRUE, originalData=FALSE)%>%config(displayModeBar=FALSE)
hospGraph <- ggplot(stateDataCleaned,aes(date, group=1, text=paste("Date: ", date,
"<br>Hospitalized: ", currentHosp,
"<br>7-Day Average: ", Avg7Day_Hosp)))+
geom_col(aes(y=currentHosp))+
geom_line(aes(y=Avg7Day_Hosp),color='blue')+
labs(title = paste("Latest data:", hospUpdated), x="Date", y="Hospitalized")
hospGraph <- ggplotly(hospGraph,tooltip="text",dynamicTicks=TRUE, originalData=FALSE)%>%config(displayModeBar=FALSE)
ICUGraph <- ggplot(stateDataCleaned,aes(x=date,group=1))+
geom_col(aes(y=ICU,fill="ICU", text=paste("Date: ", date,
"<br>ICU: ", ICU,
"<br>7-Day Average: ", Avg7Day_ICU)),color='red')+
geom_line(aes(y=Avg7Day_ICU, text=paste("Date: ", date,
"<br>ICU: ", ICU,
"<br>7-Day Average: ", Avg7Day_ICU)),color='red')+
geom_col(aes(y=vent,fill="Ventilator", text=paste("Date: ", date,
"<br>Ventilator: ", vent,
"<br>7-Day Average: ", Avg7Day_Vent)),color='blue')+
geom_line(aes(y=Avg7Day_Vent, text=paste("Date: ", date,
"<br>Ventilator: ", vent,
"<br>7-Day Average: ", Avg7Day_Vent)),color='blue')+
scale_fill_manual(name="Legend", labels = c("ICU", "Ventilator"),values = ICUcolors)+
labs(title = paste("Latest data:", hospUpdated), x="Date", y="ICU/Ventilator")
ICUGraph <- ggplotly(ICUGraph,tooltip="text",dynamicTicks=TRUE, originalData=FALSE)%>%config(displayModeBar=FALSE)
dailyDeathGraph <- ggplot(stateDataCleaned,aes(date), group=1, text=paste("Date: ", date,
"<br>Deaths: ", dailyDeaths,
"<br>7-Day Average: ", Avg7Day_Deaths))+
geom_col(aes(y=dailyDeaths))+
geom_line(aes(y=Avg7Day_Deaths),color="blue")+
labs(title = paste("Latest data:", updated), x="Date", y="Deaths Reported")
dailyDeathGraph <- ggplotly(dailyDeathGraph,tooltip="text",dynamicTicks=TRUE, originalData=FALSE)%>%config(displayModeBar=FALSE)
htmlwidgets::saveWidget(caseGraph, file="../graphs/DAILY_cases.html",selfcontained=FALSE,libdir="../graphs/plotlyJS",title='dailycases')
htmlwidgets::saveWidget(testGraph, file="../graphs/DAILY_tests.html",selfcontained=FALSE,libdir="../graphs/plotlyJS",title='dailytests')
htmlwidgets::saveWidget(posGraph,file="../graphs/DAILY_pos.html",selfcontained=FALSE,libdir="../graphs/plotlyJS",title='dailypos')
htmlwidgets::saveWidget(hospGraph,file="../graphs/DAILY_hosp.html",selfcontained=FALSE,libdir="../graphs/plotlyJS",title='dailyhosp')
htmlwidgets::saveWidget(ICUGraph,file="../graphs/DAILY_ICU.html",selfcontained=FALSE,libdir="../graphs/plotlyJS",title='dailyicu')
htmlwidgets::saveWidget(dailyDeathGraph,file="../graphs/DAILY_deaths.html",selfcontained=FALSE,libdir="../graphs/plotlyJS",title='dailydeaths')
}
stateDataCur <- stateData
stateDataCleaned <- stateDataCur%>%
select(date=1,tests=7,cases=9,currentHosp=21,ICU=23,vent=24,dailyDeaths=25)%>%
filter(row_number() >= 11)%>%
mutate(percentPos = round((cases/tests * 100),1),
Avg7Day_Cases = round((rollmean(cases,7,na.pad=TRUE, align="right")),0),
Avg7Day_Tests = round((rollmean(tests,7,na.pad=TRUE,align="right")),0),
Avg7Day_Pos = round((rollmean(percentPos,7,na.pad=TRUE,align="right")),1),
Avg7Day_Hosp = round((rollmean(currentHosp,7,na.pad=TRUE,align="right")),0),
Avg7Day_ICU = round((rollmean(ICU,7,na.pad=TRUE,align="right")),0),
Avg7Day_Vent = round((rollmean(vent,7,na.pad=TRUE,align="right")),0),
Avg7Day_Deaths = round((rollmean(dailyDeaths,7,na.pad=TRUE,align="right")),0))
updated <- tail(stateDataCleaned$date, 1) # get last row of data frame for most recent data
updated <- format(updated, "%B %d, %Y")
hospUpdated <- stateDataCleaned$date[nrow(stateDataCleaned) - 1]
hospUpdated <- format(hospUpdated, "%B %d, %Y") # get second-to-last row as hospitalizations are a day behind
caseGraph <- ggplot(stateDataCleaned, aes(x=date, group=1, text=paste("Date: ", date,
"<br>Cases: ", cases,
"<br>7-Day Average: ", Avg7Day_Cases)))+
geom_col(aes(y=cases))+
geom_line(aes(y=Avg7Day_Cases), color="blue")+
labs(title = paste("Latest data:", updated), x="Date", y = "Cases Reported")
caseGraph <- ggplotly(caseGraph,tooltip="text",dynamicTicks=TRUE, originalData=FALSE)%>%config(displayModeBar=FALSE)
testGraph <- ggplot(stateDataCleaned, aes(date, group=1, text=paste("Date: ", date,
"<br>Tests: ", tests,
"<br>7-Day Average: ", Avg7Day_Tests)))+
geom_col(aes(y=tests))+
geom_line(aes(y=Avg7Day_Tests),color="blue")+
labs(title = paste("Latest data:", updated), x="Date", y="Tests Performed")
testGraph <- ggplotly(testGraph,tooltip="text",dynamicTicks=TRUE, originalData=FALSE)%>%config(displayModeBar=FALSE)
posGraph <- ggplot(stateDataCleaned,aes(date, group=1, text=paste("Date: ", date,
"<br>Percent Pos.: ", percentPos,
"<br>7-Day Average: ", Avg7Day_Pos)))+
geom_col(aes(y=percentPos))+
geom_line(aes(y=Avg7Day_Pos),color="blue")+
labs(title = paste("Latest data:", updated), x="Date", y="Percent Positive")
posGraph <- ggplotly(posGraph,tooltip="text",dynamicTicks=TRUE, originalData=FALSE)%>%config(displayModeBar=FALSE)
hospGraph <- ggplot(stateDataCleaned,aes(date, group=1, text=paste("Date: ", date,
"<br>Hospitalized: ", currentHosp,
"<br>7-Day Average: ", Avg7Day_Hosp)))+
geom_col(aes(y=currentHosp))+
geom_line(aes(y=Avg7Day_Hosp),color='blue')+
labs(title = paste("Latest data:", hospUpdated), x="Date", y="Hospitalized")
hospGraph <- ggplotly(hospGraph,tooltip="text",dynamicTicks=TRUE, originalData=FALSE)%>%config(displayModeBar=FALSE)
ICUGraph <- ggplot(stateDataCleaned,aes(x=date,group=1))+
geom_col(aes(y=ICU,fill="ICU", text=paste("Date: ", date,
"<br>ICU: ", ICU,
"<br>7-Day Average: ", Avg7Day_ICU)),color='red')+
geom_line(aes(y=Avg7Day_ICU, text=paste("Date: ", date,
"<br>ICU: ", ICU,
"<br>7-Day Average: ", Avg7Day_ICU)),color='red')+
geom_col(aes(y=vent,fill="Ventilator", text=paste("Date: ", date,
"<br>Ventilator: ", vent,
"<br>7-Day Average: ", Avg7Day_Vent)),color='blue')+
geom_line(aes(y=Avg7Day_Vent, text=paste("Date: ", date,
"<br>Ventilator: ", vent,
"<br>7-Day Average: ", Avg7Day_Vent)),color='blue')+
scale_fill_manual(name="Legend", labels = c("ICU", "Ventilator"),values = ICUcolors)+
labs(title = paste("Latest data:", hospUpdated), x="Date", y="ICU/Ventilator")
ICUGraph <- ggplotly(ICUGraph,tooltip="text",dynamicTicks=TRUE, originalData=FALSE)%>%config(displayModeBar=FALSE)
dailyDeathGraph <- ggplot(stateDataCleaned,aes(date), group=1, text=paste("Date: ", date,
"<br>Deaths: ", dailyDeaths,
"<br>7-Day Average: ", Avg7Day_Deaths))+
geom_col(aes(y=dailyDeaths))+
geom_line(aes(y=Avg7Day_Deaths),color="blue")+
labs(title = paste("Latest data:", updated), x="Date", y="Deaths Reported")
dailyDeathGraph <- ggplotly(dailyDeathGraph,tooltip="text",dynamicTicks=TRUE, originalData=FALSE)%>%config(displayModeBar=FALSE)
htmlwidgets::saveWidget(caseGraph, file="../graphs/DAILY_cases.html",selfcontained=FALSE,libdir="../graphs/plotlyJS",title='dailycases')
htmlwidgets::saveWidget(testGraph, file="../graphs/DAILY_tests.html",selfcontained=FALSE,libdir="../graphs/plotlyJS",title='dailytests')
htmlwidgets::saveWidget(posGraph,file="../graphs/DAILY_pos.html",selfcontained=FALSE,libdir="../graphs/plotlyJS",title='dailypos')
htmlwidgets::saveWidget(hospGraph,file="../graphs/DAILY_hosp.html",selfcontained=FALSE,libdir="../graphs/plotlyJS",title='dailyhosp')
htmlwidgets::saveWidget(ICUGraph,file="../graphs/DAILY_ICU.html",selfcontained=FALSE,libdir="../graphs/plotlyJS",title='dailyicu')
htmlwidgets::saveWidget(dailyDeathGraph,file="../graphs/DAILY_deaths.html",selfcontained=FALSE,libdir="../graphs/plotlyJS",title='dailydeaths')
}
